generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  DEPARTMENT_ADMINISTRATOR
  SUPER_ADMIN
}

model User {
  id                       String                   @id @default(uuid())
  name                     String
  email                    String                   @unique
  password                 String
  role                     UserRole                 @default(STUDENT)
  student                  Student?
  super_admin              SuperAdmin?
  department_administrator DepartmentAdministrator?
  Session                  Session[]
  AuditLog                 AuditLog[]
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  Note                     Note[]

  @@map("users")
}

model SuperAdmin {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("super_admins")
}

model Student {
  id             String          @id @default(uuid())
  userId         String          @unique
  user           User            @relation(fields: [userId], references: [id])
  applications   Application[]
  qualifications Qualification[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("students")
}

model DepartmentAdministrator {
  id           String      @id @default(uuid())
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id])
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  permissions  Json
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("department_administrators")
}

model Qualification {
  id        String            @id @default(uuid())
  studentId String
  student   Student           @relation(fields: [studentId], references: [id])
  type      QualificationType
  subject   String
  grade     String
  verified  Boolean           @default(false)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("qualifications")
}

enum QualificationType {
  HIGH_SCHOOL
  UNDERGRADUATE
  LANGUAGE_TEST
  OTHER
}

model University {
  id          String       @id @default(uuid())
  name        String
  slug        String       @unique
  departments Department[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("universities")
}

model Department {
  id             String                    @id @default(uuid())
  universityId   String
  university     University                @relation(fields: [universityId], references: [id])
  name           String
  code           String
  administrators DepartmentAdministrator[]
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  Program        Program[]

  @@map("departments")
}

model Program {
  id           String               @id @default(uuid())
  departmentId String
  department   Department           @relation(fields: [departmentId], references: [id]) // Add this relation
  name         String
  requirements ProgramRequirement[]
  applications Application[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("programs")
}

model ProgramRequirement {
  id          String          @id @default(uuid())
  programId   String
  program     Program         @relation(fields: [programId], references: [id])
  type        RequirementType
  subject     String?
  minGrade    String?
  description String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("program_requirements")
}

enum RequirementType {
  GRADE
  COURSE
  LANGUAGE
  INTERVIEW
  PORTFOLIO
}

model Application {
  id          String            @id @default(uuid())
  studentId   String
  programId   String
  student     Student           @relation(fields: [studentId], references: [id])
  program     Program           @relation(fields: [programId], references: [id])
  status      ApplicationStatus @default(PENDING)
  notes       Note[]
  submittedAt DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("applications")
}

enum ApplicationStatus {
  DRAFT
  PENDING
  UNDER_REVIEW
  CONDITIONAL
  APPROVED
  REJECTED
}

model Note {
  id            String      @id @default(uuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
  authorId      String
  author        User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content       String
  internalOnly  Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("notes")
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  isValid      Boolean  @default(true)
  lastUsedAt   DateTime @default(now())
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  @@index([userId])
  @@index([refreshToken])
}

model AuditLog {
  id         String   @id @default(uuid())
  action     String // e.g., "APPLICATION_SUBMITTED"
  entityId   String // Related entity ID
  entityType String // e.g., "Application", "Document"
  userId     String? // Null for system actions
  user       User?    @relation(fields: [userId], references: [id])
  ipAddress  String?
  userAgent  String?
  metadata   Json? // Additional context
  createdAt  DateTime @default(now())

  @@index([entityId, entityType])
  @@index([userId])
  @@index([createdAt])
}

enum AuditAction {
  APPLICATION_SUBMITTED
  DOCUMENT_VERIFIED
  PAYMENT_PROCESSED
  STATUS_CHANGED
  USER_LOGIN
}
